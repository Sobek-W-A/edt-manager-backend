"""
This type stub file was generated by pyright.
"""

from datetime import datetime, timedelta
from typing import Any, Awaitable, Iterable, TYPE_CHECKING, TypeVar, Union
from redis.compat import Protocol
from redis.asyncio.connection import ConnectionPool as AsyncConnectionPool, Encoder as AsyncEncoder
from redis.connection import ConnectionPool, Encoder

if TYPE_CHECKING:
    ...
Number = Union[int, float]
EncodedT = Union[bytes, memoryview]
DecodedT = Union[str, int, float]
EncodableT = Union[EncodedT, DecodedT]
AbsExpiryT = Union[int, datetime]
ExpiryT = Union[int, timedelta]
ZScoreBoundT = Union[float, str]
BitfieldOffsetT = Union[int, str]
_StringLikeT = Union[bytes, str, memoryview]
KeyT = _StringLikeT
PatternT = _StringLikeT
FieldT = EncodableT
KeysT = Union[KeyT, Iterable[KeyT]]
ChannelT = _StringLikeT
GroupT = _StringLikeT
ConsumerT = _StringLikeT
StreamIdT = Union[int, _StringLikeT]
ScriptTextT = _StringLikeT
TimeoutSecT = Union[int, float, _StringLikeT]
AnyKeyT = TypeVar("AnyKeyT", bytes, str, memoryview)
AnyFieldT = TypeVar("AnyFieldT", bytes, str, memoryview)
AnyChannelT = TypeVar("AnyChannelT", bytes, str, memoryview)
class CommandsProtocol(Protocol):
    connection_pool: Union[AsyncConnectionPool, ConnectionPool]
    def execute_command(self, *args, **options): # -> None:
        ...
    


class ClusterCommandsProtocol(CommandsProtocol, Protocol):
    encoder: Union[AsyncEncoder, Encoder]
    def execute_command(self, *args, **options) -> Union[Any, Awaitable]:
        ...
    


