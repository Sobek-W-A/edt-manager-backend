"""
This type stub file was generated by pyright.
"""

from ..helpers import quote_string, random_string, stringify_param_value
from .commands import AsyncGraphCommands, GraphCommands
from .edge import Edge
from .node import Node
from .path import Path

DB_LABELS = ...
DB_RAELATIONSHIPTYPES = ...
DB_PROPERTYKEYS = ...
class Graph(GraphCommands):
    """
    Graph, collection of nodes and edges.
    """
    def __init__(self, client, name=...) -> None:
        """
        Create a new graph.
        """
        ...
    
    @property
    def name(self): # -> str:
        ...
    
    def get_label(self, idx):
        """
        Returns a label by it's index

        Args:

        idx:
            The index of the label
        """
        ...
    
    def get_relation(self, idx):
        """
        Returns a relationship type by it's index

        Args:

        idx:
            The index of the relation
        """
        ...
    
    def get_property(self, idx):
        """
        Returns a property by it's index

        Args:

        idx:
            The index of the property
        """
        ...
    
    def add_node(self, node): # -> None:
        """
        Adds a node to the graph.
        """
        ...
    
    def add_edge(self, edge): # -> None:
        """
        Adds an edge to the graph.
        """
        ...
    
    def call_procedure(self, procedure, *args, read_only=..., **kwagrs): # -> QueryResult:
        ...
    
    def labels(self): # -> list[list[Any]] | list[Any]:
        ...
    
    def relationship_types(self): # -> list[list[Any]] | list[Any]:
        ...
    
    def property_keys(self): # -> list[list[Any]] | list[Any]:
        ...
    


class AsyncGraph(Graph, AsyncGraphCommands):
    """Async version for Graph"""
    async def get_label(self, idx):
        """
        Returns a label by it's index

        Args:

        idx:
            The index of the label
        """
        ...
    
    async def get_property(self, idx):
        """
        Returns a property by it's index

        Args:

        idx:
            The index of the property
        """
        ...
    
    async def get_relation(self, idx):
        """
        Returns a relationship type by it's index

        Args:

        idx:
            The index of the relation
        """
        ...
    
    async def call_procedure(self, procedure, *args, read_only=..., **kwagrs): # -> AsyncQueryResult:
        ...
    
    async def labels(self): # -> list[Any]:
        ...
    
    async def property_keys(self): # -> list[Any]:
        ...
    
    async def relationship_types(self): # -> list[Any]:
        ...
    


